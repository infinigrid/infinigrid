"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = "\nprecision highp float;\n\nvarying highp vec2 v_qr;\n\nuniform sampler2D u_map;\nuniform int u_N;\nuniform float u_EDGE;\nuniform vec4 u_EDGE_COLOR;\n\nvec4 f(float a, float b, vec2 uvA, vec2 uvB, vec2 uvC) {\n\n  float EDGE = u_EDGE;\n  vec4 EDGE_COLOR = u_EDGE_COLOR;\n\n  vec2 uv;\n  float c = 1.0 - a - b;\n  float ab = abs(a-b);\n  float ac = abs(a-c);\n  float bc = abs(b-c);\n  vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n  if (a > b && a > c) {\n    if (ab < EDGE || ac < EDGE) color = EDGE_COLOR;\n  }\n  else if (b > c) {\n    if (ab < EDGE || bc < EDGE) color = EDGE_COLOR;\n  }\n  else if (ac < EDGE || bc < EDGE) color = EDGE_COLOR;\n\n  // a += (snoise2(uvA * float(u_N) + vec2(a,b)) + 0.0) / 5.0;\n  c = 1.0 - a - b;\n  if (a > b && a > c) {\n    uv = uvA;\n  }\n  else if (b > c) {\n    uv = uvB;\n  }\n  else {\n    uv = uvC;\n  }\n\n  return color * texture2D(u_map, uv);\n}\n\nvoid main(void) {\n\n  float N = float(u_N);\n  vec2 uv = vec2(floor(v_qr.x) / N, floor(v_qr.y) / N);\n\n  float q = fract(v_qr.x);\n  float r = fract(v_qr.y);\n\n  if (q - r > 0.0) {\n    float a = 1.0 - q;\n    float b = q - r;\n    float c = 1.0 - a - b;\n\n    gl_FragColor = f(a, b, uv, uv + vec2(1.0/N, 0.0), uv + vec2(1.0/N, 1.0/N));\n\n  }\n  else {\n    float a = 1.0 - r;\n    float d = r - q;\n    float c = 1.0 - a - d;\n    gl_FragColor = f(a, c, uv, uv + vec2(1.0/N, 1.0/N), uv + vec2(0.0, 1.0/N));\n  }\n}\n";